// This file was automatically generated by devops/scripts/gen-libsodium-di.bash
// The preserved libsodium ISC license is presented below, and extends to this file.

/*
 * ISC License
 *
 * Copyright (c) 2013-2023
 * Frank Denis <j at pureftpd dot org>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
module juptune.crypto.libsodium;
extern(C) @nogc nothrow:
	__gshared const(char)* sodium_version_string();
	__gshared int sodium_library_version_major();
	__gshared int sodium_library_version_minor();
	__gshared int sodium_library_minimal();
	__gshared int sodium_init();
	__gshared int sodium_set_misuse_handler(void function() handler);
	__gshared void sodium_misuse();
	__gshared int crypto_aead_aes256gcm_is_available();
	__gshared ulong crypto_aead_aes256gcm_keybytes();
	__gshared ulong crypto_aead_aes256gcm_nsecbytes();
	__gshared ulong crypto_aead_aes256gcm_npubbytes();
	__gshared ulong crypto_aead_aes256gcm_abytes();
	__gshared ulong crypto_aead_aes256gcm_messagebytes_max();
	struct crypto_aead_aes256gcm_state_
	{
		ubyte[512] opaque = void;
	}

	__gshared ulong crypto_aead_aes256gcm_statebytes();
	__gshared int crypto_aead_aes256gcm_encrypt(ubyte* c, ulong* clen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_aes256gcm_decrypt(ubyte* m, ulong* mlen_p, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_aes256gcm_encrypt_detached(ubyte* c, ubyte* mac, ulong* maclen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_aes256gcm_decrypt_detached(ubyte* m, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* mac, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_aes256gcm_beforenm( crypto_aead_aes256gcm_state_* ctx_, const(ubyte)* k);
	__gshared int crypto_aead_aes256gcm_encrypt_afternm(ubyte* c, ulong* clen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub,  crypto_aead_aes256gcm_state_* ctx_);
	__gshared int crypto_aead_aes256gcm_decrypt_afternm(ubyte* m, ulong* mlen_p, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* ad, ulong adlen, const(ubyte)* npub,  crypto_aead_aes256gcm_state_* ctx_);
	__gshared int crypto_aead_aes256gcm_encrypt_detached_afternm(ubyte* c, ubyte* mac, ulong* maclen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub,  crypto_aead_aes256gcm_state_* ctx_);
	__gshared int crypto_aead_aes256gcm_decrypt_detached_afternm(ubyte* m, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* mac, const(ubyte)* ad, ulong adlen, const(ubyte)* npub,  crypto_aead_aes256gcm_state_* ctx_);
	__gshared void crypto_aead_aes256gcm_keygen(ubyte[32u] k);
	__gshared ulong crypto_aead_chacha20poly1305_ietf_keybytes();
	__gshared ulong crypto_aead_chacha20poly1305_ietf_nsecbytes();
	__gshared ulong crypto_aead_chacha20poly1305_ietf_npubbytes();
	__gshared ulong crypto_aead_chacha20poly1305_ietf_abytes();
	__gshared ulong crypto_aead_chacha20poly1305_ietf_messagebytes_max();
	__gshared int crypto_aead_chacha20poly1305_ietf_encrypt(ubyte* c, ulong* clen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_chacha20poly1305_ietf_decrypt(ubyte* m, ulong* mlen_p, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_chacha20poly1305_ietf_encrypt_detached(ubyte* c, ubyte* mac, ulong* maclen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_chacha20poly1305_ietf_decrypt_detached(ubyte* m, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* mac, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared void crypto_aead_chacha20poly1305_ietf_keygen(ubyte[32u] k);
	__gshared ulong crypto_aead_chacha20poly1305_keybytes();
	__gshared ulong crypto_aead_chacha20poly1305_nsecbytes();
	__gshared ulong crypto_aead_chacha20poly1305_npubbytes();
	__gshared ulong crypto_aead_chacha20poly1305_abytes();
	__gshared ulong crypto_aead_chacha20poly1305_messagebytes_max();
	__gshared int crypto_aead_chacha20poly1305_encrypt(ubyte* c, ulong* clen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_chacha20poly1305_decrypt(ubyte* m, ulong* mlen_p, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_chacha20poly1305_encrypt_detached(ubyte* c, ubyte* mac, ulong* maclen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_chacha20poly1305_decrypt_detached(ubyte* m, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* mac, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared void crypto_aead_chacha20poly1305_keygen(ubyte[32u] k);
	__gshared ulong crypto_aead_xchacha20poly1305_ietf_keybytes();
	__gshared ulong crypto_aead_xchacha20poly1305_ietf_nsecbytes();
	__gshared ulong crypto_aead_xchacha20poly1305_ietf_npubbytes();
	__gshared ulong crypto_aead_xchacha20poly1305_ietf_abytes();
	__gshared ulong crypto_aead_xchacha20poly1305_ietf_messagebytes_max();
	__gshared int crypto_aead_xchacha20poly1305_ietf_encrypt(ubyte* c, ulong* clen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_xchacha20poly1305_ietf_decrypt(ubyte* m, ulong* mlen_p, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_xchacha20poly1305_ietf_encrypt_detached(ubyte* c, ubyte* mac, ulong* maclen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, const(ubyte)* nsec, const(ubyte)* npub, const(ubyte)* k);
	__gshared int crypto_aead_xchacha20poly1305_ietf_decrypt_detached(ubyte* m, ubyte* nsec, const(ubyte)* c, ulong clen, const(ubyte)* mac, const(ubyte)* ad, ulong adlen, const(ubyte)* npub, const(ubyte)* k);
	__gshared void crypto_aead_xchacha20poly1305_ietf_keygen(ubyte[32u] k);
	struct crypto_hash_sha512_state
	{
		ulong[8] state = void;
		ulong[2] count = void;
		ubyte[128] buf = void;
	}

	__gshared ulong crypto_hash_sha512_statebytes();
	__gshared ulong crypto_hash_sha512_bytes();
	__gshared int crypto_hash_sha512(ubyte* out_, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_hash_sha512_init( crypto_hash_sha512_state* state);
	__gshared int crypto_hash_sha512_update( crypto_hash_sha512_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_hash_sha512_final( crypto_hash_sha512_state* state, ubyte* out_);
	__gshared ulong crypto_auth_hmacsha512_bytes();
	__gshared ulong crypto_auth_hmacsha512_keybytes();
	__gshared int crypto_auth_hmacsha512(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_auth_hmacsha512_verify(const(ubyte)* h, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	struct crypto_auth_hmacsha512_state
	{
		 crypto_hash_sha512_state ictx = void;
		 crypto_hash_sha512_state octx = void;
	}

	__gshared ulong crypto_auth_hmacsha512_statebytes();
	__gshared int crypto_auth_hmacsha512_init( crypto_auth_hmacsha512_state* state, const(ubyte)* key, ulong keylen);
	__gshared int crypto_auth_hmacsha512_update( crypto_auth_hmacsha512_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_auth_hmacsha512_final( crypto_auth_hmacsha512_state* state, ubyte* out_);
	__gshared void crypto_auth_hmacsha512_keygen(ubyte[32u] k);
	__gshared ulong crypto_auth_hmacsha512256_bytes();
	__gshared ulong crypto_auth_hmacsha512256_keybytes();
	__gshared int crypto_auth_hmacsha512256(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_auth_hmacsha512256_verify(const(ubyte)* h, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared ulong crypto_auth_hmacsha512256_statebytes();
	__gshared int crypto_auth_hmacsha512256_init( crypto_auth_hmacsha512_state* state, const(ubyte)* key, ulong keylen);
	__gshared int crypto_auth_hmacsha512256_update( crypto_auth_hmacsha512_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_auth_hmacsha512256_final( crypto_auth_hmacsha512_state* state, ubyte* out_);
	__gshared void crypto_auth_hmacsha512256_keygen(ubyte[32u] k);
	__gshared ulong crypto_auth_bytes();
	__gshared ulong crypto_auth_keybytes();
	__gshared const(char)* crypto_auth_primitive();
	__gshared int crypto_auth(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_auth_verify(const(ubyte)* h, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared void crypto_auth_keygen(ubyte[32u] k);
	struct crypto_hash_sha256_state
	{
		uint[8] state = void;
		ulong count = void;
		ubyte[64] buf = void;
	}

	__gshared ulong crypto_hash_sha256_statebytes();
	__gshared ulong crypto_hash_sha256_bytes();
	__gshared int crypto_hash_sha256(ubyte* out_, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_hash_sha256_init( crypto_hash_sha256_state* state);
	__gshared int crypto_hash_sha256_update( crypto_hash_sha256_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_hash_sha256_final( crypto_hash_sha256_state* state, ubyte* out_);
	__gshared ulong crypto_auth_hmacsha256_bytes();
	__gshared ulong crypto_auth_hmacsha256_keybytes();
	__gshared int crypto_auth_hmacsha256(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_auth_hmacsha256_verify(const(ubyte)* h, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	struct crypto_auth_hmacsha256_state
	{
		 crypto_hash_sha256_state ictx = void;
		 crypto_hash_sha256_state octx = void;
	}

	__gshared ulong crypto_auth_hmacsha256_statebytes();
	__gshared int crypto_auth_hmacsha256_init( crypto_auth_hmacsha256_state* state, const(ubyte)* key, ulong keylen);
	__gshared int crypto_auth_hmacsha256_update( crypto_auth_hmacsha256_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_auth_hmacsha256_final( crypto_auth_hmacsha256_state* state, ubyte* out_);
	__gshared void crypto_auth_hmacsha256_keygen(ubyte[32u] k);
	__gshared ulong crypto_stream_xsalsa20_keybytes();
	__gshared ulong crypto_stream_xsalsa20_noncebytes();
	__gshared ulong crypto_stream_xsalsa20_messagebytes_max();
	__gshared int crypto_stream_xsalsa20(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_xsalsa20_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_xsalsa20_xor_ic(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, ulong ic, const(ubyte)* k);
	__gshared void crypto_stream_xsalsa20_keygen(ubyte[32u] k);
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_seedbytes();
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_publickeybytes();
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_secretkeybytes();
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_beforenmbytes();
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_noncebytes();
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_macbytes();
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_messagebytes_max();
	__gshared int crypto_box_curve25519xsalsa20poly1305_seed_keypair(ubyte* pk, ubyte* sk, const(ubyte)* seed);
	__gshared int crypto_box_curve25519xsalsa20poly1305_keypair(ubyte* pk, ubyte* sk);
	__gshared int crypto_box_curve25519xsalsa20poly1305_beforenm(ubyte* k, const(ubyte)* pk, const(ubyte)* sk);
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_boxzerobytes();
	__gshared ulong crypto_box_curve25519xsalsa20poly1305_zerobytes();
	__gshared int crypto_box_curve25519xsalsa20poly1305(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_curve25519xsalsa20poly1305_open(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_curve25519xsalsa20poly1305_afternm(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_curve25519xsalsa20poly1305_open_afternm(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared ulong crypto_box_seedbytes();
	__gshared ulong crypto_box_publickeybytes();
	__gshared ulong crypto_box_secretkeybytes();
	__gshared ulong crypto_box_noncebytes();
	__gshared ulong crypto_box_macbytes();
	__gshared ulong crypto_box_messagebytes_max();
	__gshared const(char)* crypto_box_primitive();
	__gshared int crypto_box_seed_keypair(ubyte* pk, ubyte* sk, const(ubyte)* seed);
	__gshared int crypto_box_keypair(ubyte* pk, ubyte* sk);
	__gshared int crypto_box_easy(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_open_easy(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_detached(ubyte* c, ubyte* mac, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_open_detached(ubyte* m, const(ubyte)* c, const(ubyte)* mac, ulong clen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared ulong crypto_box_beforenmbytes();
	__gshared int crypto_box_beforenm(ubyte* k, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_easy_afternm(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_open_easy_afternm(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_detached_afternm(ubyte* c, ubyte* mac, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_open_detached_afternm(ubyte* m, const(ubyte)* c, const(ubyte)* mac, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared ulong crypto_box_sealbytes();
	__gshared int crypto_box_seal(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* pk);
	__gshared int crypto_box_seal_open(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* pk, const(ubyte)* sk);
	__gshared ulong crypto_box_zerobytes();
	__gshared ulong crypto_box_boxzerobytes();
	__gshared int crypto_box(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_open(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_afternm(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_open_afternm(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared ulong crypto_core_hsalsa20_outputbytes();
	__gshared ulong crypto_core_hsalsa20_inputbytes();
	__gshared ulong crypto_core_hsalsa20_keybytes();
	__gshared ulong crypto_core_hsalsa20_constbytes();
	__gshared int crypto_core_hsalsa20(ubyte* out_, const(ubyte)* in_, const(ubyte)* k, const(ubyte)* c);
	__gshared ulong crypto_core_hchacha20_outputbytes();
	__gshared ulong crypto_core_hchacha20_inputbytes();
	__gshared ulong crypto_core_hchacha20_keybytes();
	__gshared ulong crypto_core_hchacha20_constbytes();
	__gshared int crypto_core_hchacha20(ubyte* out_, const(ubyte)* in_, const(ubyte)* k, const(ubyte)* c);
	__gshared ulong crypto_core_salsa20_outputbytes();
	__gshared ulong crypto_core_salsa20_inputbytes();
	__gshared ulong crypto_core_salsa20_keybytes();
	__gshared ulong crypto_core_salsa20_constbytes();
	__gshared int crypto_core_salsa20(ubyte* out_, const(ubyte)* in_, const(ubyte)* k, const(ubyte)* c);
	__gshared ulong crypto_core_salsa2012_outputbytes();
	__gshared ulong crypto_core_salsa2012_inputbytes();
	__gshared ulong crypto_core_salsa2012_keybytes();
	__gshared ulong crypto_core_salsa2012_constbytes();
	__gshared int crypto_core_salsa2012(ubyte* out_, const(ubyte)* in_, const(ubyte)* k, const(ubyte)* c);
	__gshared ulong crypto_core_salsa208_outputbytes();
	__gshared ulong crypto_core_salsa208_inputbytes();
	__gshared ulong crypto_core_salsa208_keybytes();
	__gshared ulong crypto_core_salsa208_constbytes();
	__gshared int crypto_core_salsa208(ubyte* out_, const(ubyte)* in_, const(ubyte)* k, const(ubyte)* c);
	struct crypto_generichash_blake2b_state
	{
		align ubyte[384] opaque = void;
	}

	__gshared ulong crypto_generichash_blake2b_bytes_min();
	__gshared ulong crypto_generichash_blake2b_bytes_max();
	__gshared ulong crypto_generichash_blake2b_bytes();
	__gshared ulong crypto_generichash_blake2b_keybytes_min();
	__gshared ulong crypto_generichash_blake2b_keybytes_max();
	__gshared ulong crypto_generichash_blake2b_keybytes();
	__gshared ulong crypto_generichash_blake2b_saltbytes();
	__gshared ulong crypto_generichash_blake2b_personalbytes();
	__gshared ulong crypto_generichash_blake2b_statebytes();
	__gshared int crypto_generichash_blake2b(ubyte* out_, ulong outlen, const(ubyte)* in_, ulong inlen, const(ubyte)* key, ulong keylen);
	__gshared int crypto_generichash_blake2b_salt_personal(ubyte* out_, ulong outlen, const(ubyte)* in_, ulong inlen, const(ubyte)* key, ulong keylen, const(ubyte)* salt, const(ubyte)* personal);
	__gshared int crypto_generichash_blake2b_init( crypto_generichash_blake2b_state* state, const(ubyte)* key, const(ulong) keylen, const(ulong) outlen);
	__gshared int crypto_generichash_blake2b_init_salt_personal( crypto_generichash_blake2b_state* state, const(ubyte)* key, const(ulong) keylen, const(ulong) outlen, const(ubyte)* salt, const(ubyte)* personal);
	__gshared int crypto_generichash_blake2b_update( crypto_generichash_blake2b_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_generichash_blake2b_final( crypto_generichash_blake2b_state* state, ubyte* out_, const(ulong) outlen);
	__gshared void crypto_generichash_blake2b_keygen(ubyte[32u] k);
	__gshared ulong crypto_generichash_bytes_min();
	__gshared ulong crypto_generichash_bytes_max();
	__gshared ulong crypto_generichash_bytes();
	__gshared ulong crypto_generichash_keybytes_min();
	__gshared ulong crypto_generichash_keybytes_max();
	__gshared ulong crypto_generichash_keybytes();
	__gshared const(char)* crypto_generichash_primitive();
	__gshared ulong crypto_generichash_statebytes();
	__gshared int crypto_generichash(ubyte* out_, ulong outlen, const(ubyte)* in_, ulong inlen, const(ubyte)* key, ulong keylen);
	__gshared int crypto_generichash_init( crypto_generichash_blake2b_state* state, const(ubyte)* key, const(ulong) keylen, const(ulong) outlen);
	__gshared int crypto_generichash_update( crypto_generichash_blake2b_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_generichash_final( crypto_generichash_blake2b_state* state, ubyte* out_, const(ulong) outlen);
	__gshared void crypto_generichash_keygen(ubyte[32u] k);
	__gshared ulong crypto_hash_bytes();
	__gshared int crypto_hash(ubyte* out_, const(ubyte)* in_, ulong inlen);
	__gshared const(char)* crypto_hash_primitive();
	__gshared ulong crypto_kdf_blake2b_bytes_min();
	__gshared ulong crypto_kdf_blake2b_bytes_max();
	__gshared ulong crypto_kdf_blake2b_contextbytes();
	__gshared ulong crypto_kdf_blake2b_keybytes();
	__gshared int crypto_kdf_blake2b_derive_from_key(ubyte* subkey, ulong subkey_len, ulong subkey_id, const(char)[8] ctx, const(ubyte)[32] key);
	__gshared ulong crypto_kdf_bytes_min();
	__gshared ulong crypto_kdf_bytes_max();
	__gshared ulong crypto_kdf_contextbytes();
	__gshared ulong crypto_kdf_keybytes();
	__gshared const(char)* crypto_kdf_primitive();
	__gshared int crypto_kdf_derive_from_key(ubyte* subkey, ulong subkey_len, ulong subkey_id, const(char)[8] ctx, const(ubyte)[32] key);
	__gshared void crypto_kdf_keygen(ubyte[32] k);
	__gshared ulong crypto_kx_publickeybytes();
	__gshared ulong crypto_kx_secretkeybytes();
	__gshared ulong crypto_kx_seedbytes();
	__gshared ulong crypto_kx_sessionkeybytes();
	__gshared const(char)* crypto_kx_primitive();
	__gshared int crypto_kx_seed_keypair(ubyte[32] pk, ubyte[32] sk, const(ubyte)[32] seed);
	__gshared int crypto_kx_keypair(ubyte[32] pk, ubyte[32] sk);
	__gshared int crypto_kx_client_session_keys(ubyte[32] rx, ubyte[32] tx, const(ubyte)[32] client_pk, const(ubyte)[32] client_sk, const(ubyte)[32] server_pk);
	__gshared int crypto_kx_server_session_keys(ubyte[32] rx, ubyte[32] tx, const(ubyte)[32] server_pk, const(ubyte)[32] server_sk, const(ubyte)[32] client_pk);
	struct crypto_onetimeauth_poly1305_state
	{
		ubyte[256] opaque = void;
	}

	__gshared ulong crypto_onetimeauth_poly1305_statebytes();
	__gshared ulong crypto_onetimeauth_poly1305_bytes();
	__gshared ulong crypto_onetimeauth_poly1305_keybytes();
	__gshared int crypto_onetimeauth_poly1305(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_onetimeauth_poly1305_verify(const(ubyte)* h, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_onetimeauth_poly1305_init( crypto_onetimeauth_poly1305_state* state, const(ubyte)* key);
	__gshared int crypto_onetimeauth_poly1305_update( crypto_onetimeauth_poly1305_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_onetimeauth_poly1305_final( crypto_onetimeauth_poly1305_state* state, ubyte* out_);
	__gshared void crypto_onetimeauth_poly1305_keygen(ubyte[32u] k);
	__gshared ulong crypto_onetimeauth_statebytes();
	__gshared ulong crypto_onetimeauth_bytes();
	__gshared ulong crypto_onetimeauth_keybytes();
	__gshared const(char)* crypto_onetimeauth_primitive();
	__gshared int crypto_onetimeauth(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_onetimeauth_verify(const(ubyte)* h, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared int crypto_onetimeauth_init( crypto_onetimeauth_poly1305_state* state, const(ubyte)* key);
	__gshared int crypto_onetimeauth_update( crypto_onetimeauth_poly1305_state* state, const(ubyte)* in_, ulong inlen);
	__gshared int crypto_onetimeauth_final( crypto_onetimeauth_poly1305_state* state, ubyte* out_);
	__gshared void crypto_onetimeauth_keygen(ubyte[32u] k);
	__gshared int crypto_pwhash_argon2i_alg_argon2i13();
	__gshared ulong crypto_pwhash_argon2i_bytes_min();
	__gshared ulong crypto_pwhash_argon2i_bytes_max();
	__gshared ulong crypto_pwhash_argon2i_passwd_min();
	__gshared ulong crypto_pwhash_argon2i_passwd_max();
	__gshared ulong crypto_pwhash_argon2i_saltbytes();
	__gshared ulong crypto_pwhash_argon2i_strbytes();
	__gshared const(char)* crypto_pwhash_argon2i_strprefix();
	__gshared ulong crypto_pwhash_argon2i_opslimit_min();
	__gshared ulong crypto_pwhash_argon2i_opslimit_max();
	__gshared ulong crypto_pwhash_argon2i_memlimit_min();
	__gshared ulong crypto_pwhash_argon2i_memlimit_max();
	__gshared ulong crypto_pwhash_argon2i_opslimit_interactive();
	__gshared ulong crypto_pwhash_argon2i_memlimit_interactive();
	__gshared ulong crypto_pwhash_argon2i_opslimit_moderate();
	__gshared ulong crypto_pwhash_argon2i_memlimit_moderate();
	__gshared ulong crypto_pwhash_argon2i_opslimit_sensitive();
	__gshared ulong crypto_pwhash_argon2i_memlimit_sensitive();
	__gshared int crypto_pwhash_argon2i(ubyte* out_, ulong outlen, const(char)* passwd, ulong passwdlen, const(ubyte)* salt, ulong opslimit, ulong memlimit, int alg);
	__gshared int crypto_pwhash_argon2i_str(char[128u] out_, const(char)* passwd, ulong passwdlen, ulong opslimit, ulong memlimit);
	__gshared int crypto_pwhash_argon2i_str_verify(const(char)[128u] str, const(char)* passwd, ulong passwdlen);
	__gshared int crypto_pwhash_argon2i_str_needs_rehash(const(char)[128u] str, ulong opslimit, ulong memlimit);
	__gshared int crypto_pwhash_argon2id_alg_argon2id13();
	__gshared ulong crypto_pwhash_argon2id_bytes_min();
	__gshared ulong crypto_pwhash_argon2id_bytes_max();
	__gshared ulong crypto_pwhash_argon2id_passwd_min();
	__gshared ulong crypto_pwhash_argon2id_passwd_max();
	__gshared ulong crypto_pwhash_argon2id_saltbytes();
	__gshared ulong crypto_pwhash_argon2id_strbytes();
	__gshared const(char)* crypto_pwhash_argon2id_strprefix();
	__gshared ulong crypto_pwhash_argon2id_opslimit_min();
	__gshared ulong crypto_pwhash_argon2id_opslimit_max();
	__gshared ulong crypto_pwhash_argon2id_memlimit_min();
	__gshared ulong crypto_pwhash_argon2id_memlimit_max();
	__gshared ulong crypto_pwhash_argon2id_opslimit_interactive();
	__gshared ulong crypto_pwhash_argon2id_memlimit_interactive();
	__gshared ulong crypto_pwhash_argon2id_opslimit_moderate();
	__gshared ulong crypto_pwhash_argon2id_memlimit_moderate();
	__gshared ulong crypto_pwhash_argon2id_opslimit_sensitive();
	__gshared ulong crypto_pwhash_argon2id_memlimit_sensitive();
	__gshared int crypto_pwhash_argon2id(ubyte* out_, ulong outlen, const(char)* passwd, ulong passwdlen, const(ubyte)* salt, ulong opslimit, ulong memlimit, int alg);
	__gshared int crypto_pwhash_argon2id_str(char[128u] out_, const(char)* passwd, ulong passwdlen, ulong opslimit, ulong memlimit);
	__gshared int crypto_pwhash_argon2id_str_verify(const(char)[128u] str, const(char)* passwd, ulong passwdlen);
	__gshared int crypto_pwhash_argon2id_str_needs_rehash(const(char)[128u] str, ulong opslimit, ulong memlimit);
	__gshared int crypto_pwhash_alg_argon2i13();
	__gshared int crypto_pwhash_alg_argon2id13();
	__gshared int crypto_pwhash_alg_default();
	__gshared ulong crypto_pwhash_bytes_min();
	__gshared ulong crypto_pwhash_bytes_max();
	__gshared ulong crypto_pwhash_passwd_min();
	__gshared ulong crypto_pwhash_passwd_max();
	__gshared ulong crypto_pwhash_saltbytes();
	__gshared ulong crypto_pwhash_strbytes();
	__gshared const(char)* crypto_pwhash_strprefix();
	__gshared ulong crypto_pwhash_opslimit_min();
	__gshared ulong crypto_pwhash_opslimit_max();
	__gshared ulong crypto_pwhash_memlimit_min();
	__gshared ulong crypto_pwhash_memlimit_max();
	__gshared ulong crypto_pwhash_opslimit_interactive();
	__gshared ulong crypto_pwhash_memlimit_interactive();
	__gshared ulong crypto_pwhash_opslimit_moderate();
	__gshared ulong crypto_pwhash_memlimit_moderate();
	__gshared ulong crypto_pwhash_opslimit_sensitive();
	__gshared ulong crypto_pwhash_memlimit_sensitive();
	__gshared int crypto_pwhash(ubyte* out_, ulong outlen, const(char)* passwd, ulong passwdlen, const(ubyte)* salt, ulong opslimit, ulong memlimit, int alg);
	__gshared int crypto_pwhash_str(char[128u] out_, const(char)* passwd, ulong passwdlen, ulong opslimit, ulong memlimit);
	__gshared int crypto_pwhash_str_alg(char[128u] out_, const(char)* passwd, ulong passwdlen, ulong opslimit, ulong memlimit, int alg);
	__gshared int crypto_pwhash_str_verify(const(char)[128u] str, const(char)* passwd, ulong passwdlen);
	__gshared int crypto_pwhash_str_needs_rehash(const(char)[128u] str, ulong opslimit, ulong memlimit);
	__gshared const(char)* crypto_pwhash_primitive();
	__gshared ulong crypto_scalarmult_curve25519_bytes();
	__gshared ulong crypto_scalarmult_curve25519_scalarbytes();
	__gshared int crypto_scalarmult_curve25519(ubyte* q, const(ubyte)* n, const(ubyte)* p);
	__gshared int crypto_scalarmult_curve25519_base(ubyte* q, const(ubyte)* n);
	__gshared ulong crypto_scalarmult_bytes();
	__gshared ulong crypto_scalarmult_scalarbytes();
	__gshared const(char)* crypto_scalarmult_primitive();
	__gshared int crypto_scalarmult_base(ubyte* q, const(ubyte)* n);
	__gshared int crypto_scalarmult(ubyte* q, const(ubyte)* n, const(ubyte)* p);
	__gshared ulong crypto_secretbox_xsalsa20poly1305_keybytes();
	__gshared ulong crypto_secretbox_xsalsa20poly1305_noncebytes();
	__gshared ulong crypto_secretbox_xsalsa20poly1305_macbytes();
	__gshared ulong crypto_secretbox_xsalsa20poly1305_messagebytes_max();
	__gshared int crypto_secretbox_xsalsa20poly1305(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_xsalsa20poly1305_open(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared void crypto_secretbox_xsalsa20poly1305_keygen(ubyte[32u] k);
	__gshared ulong crypto_secretbox_xsalsa20poly1305_boxzerobytes();
	__gshared ulong crypto_secretbox_xsalsa20poly1305_zerobytes();
	__gshared ulong crypto_secretbox_keybytes();
	__gshared ulong crypto_secretbox_noncebytes();
	__gshared ulong crypto_secretbox_macbytes();
	__gshared const(char)* crypto_secretbox_primitive();
	__gshared ulong crypto_secretbox_messagebytes_max();
	__gshared int crypto_secretbox_easy(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_open_easy(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_detached(ubyte* c, ubyte* mac, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_open_detached(ubyte* m, const(ubyte)* c, const(ubyte)* mac, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared void crypto_secretbox_keygen(ubyte[32u] k);
	__gshared ulong crypto_secretbox_zerobytes();
	__gshared ulong crypto_secretbox_boxzerobytes();
	__gshared int crypto_secretbox(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_open(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared ulong crypto_stream_chacha20_keybytes();
	__gshared ulong crypto_stream_chacha20_noncebytes();
	__gshared ulong crypto_stream_chacha20_messagebytes_max();
	__gshared int crypto_stream_chacha20(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_chacha20_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_chacha20_xor_ic(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, ulong ic, const(ubyte)* k);
	__gshared void crypto_stream_chacha20_keygen(ubyte[32u] k);
	__gshared ulong crypto_stream_chacha20_ietf_keybytes();
	__gshared ulong crypto_stream_chacha20_ietf_noncebytes();
	__gshared ulong crypto_stream_chacha20_ietf_messagebytes_max();
	__gshared int crypto_stream_chacha20_ietf(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_chacha20_ietf_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_chacha20_ietf_xor_ic(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, uint ic, const(ubyte)* k);
	__gshared void crypto_stream_chacha20_ietf_keygen(ubyte[32u] k);
	__gshared ulong crypto_secretstream_xchacha20poly1305_abytes();
	__gshared ulong crypto_secretstream_xchacha20poly1305_headerbytes();
	__gshared ulong crypto_secretstream_xchacha20poly1305_keybytes();
	__gshared ulong crypto_secretstream_xchacha20poly1305_messagebytes_max();
	__gshared ubyte crypto_secretstream_xchacha20poly1305_tag_message();
	__gshared ubyte crypto_secretstream_xchacha20poly1305_tag_push();
	__gshared ubyte crypto_secretstream_xchacha20poly1305_tag_rekey();
	__gshared ubyte crypto_secretstream_xchacha20poly1305_tag_final();
	struct crypto_secretstream_xchacha20poly1305_state
	{
		ubyte[32u] k = void;
		ubyte[12u] nonce = void;
		ubyte[8] _pad = void;
	}

	__gshared ulong crypto_secretstream_xchacha20poly1305_statebytes();
	__gshared void crypto_secretstream_xchacha20poly1305_keygen(ubyte[32u] k);
	__gshared int crypto_secretstream_xchacha20poly1305_init_push( crypto_secretstream_xchacha20poly1305_state* state, ubyte[24u] header, const(ubyte)[32u] k);
	__gshared int crypto_secretstream_xchacha20poly1305_push( crypto_secretstream_xchacha20poly1305_state* state, ubyte* c, ulong* clen_p, const(ubyte)* m, ulong mlen, const(ubyte)* ad, ulong adlen, ubyte tag);
	__gshared int crypto_secretstream_xchacha20poly1305_init_pull( crypto_secretstream_xchacha20poly1305_state* state, const(ubyte)[24u] header, const(ubyte)[32u] k);
	__gshared int crypto_secretstream_xchacha20poly1305_pull( crypto_secretstream_xchacha20poly1305_state* state, ubyte* m, ulong* mlen_p, ubyte* tag_p, const(ubyte)* c, ulong clen, const(ubyte)* ad, ulong adlen);
	__gshared void crypto_secretstream_xchacha20poly1305_rekey( crypto_secretstream_xchacha20poly1305_state* state);
	__gshared ulong crypto_shorthash_siphash24_bytes();
	__gshared ulong crypto_shorthash_siphash24_keybytes();
	__gshared int crypto_shorthash_siphash24(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared ulong crypto_shorthash_siphashx24_bytes();
	__gshared ulong crypto_shorthash_siphashx24_keybytes();
	__gshared int crypto_shorthash_siphashx24(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared ulong crypto_shorthash_bytes();
	__gshared ulong crypto_shorthash_keybytes();
	__gshared const(char)* crypto_shorthash_primitive();
	__gshared int crypto_shorthash(ubyte* out_, const(ubyte)* in_, ulong inlen, const(ubyte)* k);
	__gshared void crypto_shorthash_keygen(ubyte[16u] k);
	struct crypto_sign_ed25519ph_state
	{
		 crypto_hash_sha512_state hs = void;
	}

	__gshared ulong crypto_sign_ed25519ph_statebytes();
	__gshared ulong crypto_sign_ed25519_bytes();
	__gshared ulong crypto_sign_ed25519_seedbytes();
	__gshared ulong crypto_sign_ed25519_publickeybytes();
	__gshared ulong crypto_sign_ed25519_secretkeybytes();
	__gshared ulong crypto_sign_ed25519_messagebytes_max();
	__gshared int crypto_sign_ed25519(ubyte* sm, ulong* smlen_p, const(ubyte)* m, ulong mlen, const(ubyte)* sk);
	__gshared int crypto_sign_ed25519_open(ubyte* m, ulong* mlen_p, const(ubyte)* sm, ulong smlen, const(ubyte)* pk);
	__gshared int crypto_sign_ed25519_detached(ubyte* sig, ulong* siglen_p, const(ubyte)* m, ulong mlen, const(ubyte)* sk);
	__gshared int crypto_sign_ed25519_verify_detached(const(ubyte)* sig, const(ubyte)* m, ulong mlen, const(ubyte)* pk);
	__gshared int crypto_sign_ed25519_keypair(ubyte* pk, ubyte* sk);
	__gshared int crypto_sign_ed25519_seed_keypair(ubyte* pk, ubyte* sk, const(ubyte)* seed);
	__gshared int crypto_sign_ed25519_pk_to_curve25519(ubyte* curve25519_pk, const(ubyte)* ed25519_pk);
	__gshared int crypto_sign_ed25519_sk_to_curve25519(ubyte* curve25519_sk, const(ubyte)* ed25519_sk);
	__gshared int crypto_sign_ed25519_sk_to_seed(ubyte* seed, const(ubyte)* sk);
	__gshared int crypto_sign_ed25519_sk_to_pk(ubyte* pk, const(ubyte)* sk);
	__gshared int crypto_sign_ed25519ph_init( crypto_sign_ed25519ph_state* state);
	__gshared int crypto_sign_ed25519ph_update( crypto_sign_ed25519ph_state* state, const(ubyte)* m, ulong mlen);
	__gshared int crypto_sign_ed25519ph_final_create( crypto_sign_ed25519ph_state* state, ubyte* sig, ulong* siglen_p, const(ubyte)* sk);
	__gshared int crypto_sign_ed25519ph_final_verify( crypto_sign_ed25519ph_state* state, const(ubyte)* sig, const(ubyte)* pk);
	__gshared ulong crypto_sign_statebytes();
	__gshared ulong crypto_sign_bytes();
	__gshared ulong crypto_sign_seedbytes();
	__gshared ulong crypto_sign_publickeybytes();
	__gshared ulong crypto_sign_secretkeybytes();
	__gshared ulong crypto_sign_messagebytes_max();
	__gshared const(char)* crypto_sign_primitive();
	__gshared int crypto_sign_seed_keypair(ubyte* pk, ubyte* sk, const(ubyte)* seed);
	__gshared int crypto_sign_keypair(ubyte* pk, ubyte* sk);
	__gshared int crypto_sign(ubyte* sm, ulong* smlen_p, const(ubyte)* m, ulong mlen, const(ubyte)* sk);
	__gshared int crypto_sign_open(ubyte* m, ulong* mlen_p, const(ubyte)* sm, ulong smlen, const(ubyte)* pk);
	__gshared int crypto_sign_detached(ubyte* sig, ulong* siglen_p, const(ubyte)* m, ulong mlen, const(ubyte)* sk);
	__gshared int crypto_sign_verify_detached(const(ubyte)* sig, const(ubyte)* m, ulong mlen, const(ubyte)* pk);
	__gshared int crypto_sign_init( crypto_sign_ed25519ph_state* state);
	__gshared int crypto_sign_update( crypto_sign_ed25519ph_state* state, const(ubyte)* m, ulong mlen);
	__gshared int crypto_sign_final_create( crypto_sign_ed25519ph_state* state, ubyte* sig, ulong* siglen_p, const(ubyte)* sk);
	__gshared int crypto_sign_final_verify( crypto_sign_ed25519ph_state* state, const(ubyte)* sig, const(ubyte)* pk);
	__gshared ulong crypto_stream_keybytes();
	__gshared ulong crypto_stream_noncebytes();
	__gshared ulong crypto_stream_messagebytes_max();
	__gshared const(char)* crypto_stream_primitive();
	__gshared int crypto_stream(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared void crypto_stream_keygen(ubyte[32u] k);
	__gshared ulong crypto_stream_salsa20_keybytes();
	__gshared ulong crypto_stream_salsa20_noncebytes();
	__gshared ulong crypto_stream_salsa20_messagebytes_max();
	__gshared int crypto_stream_salsa20(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_salsa20_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_salsa20_xor_ic(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, ulong ic, const(ubyte)* k);
	__gshared void crypto_stream_salsa20_keygen(ubyte[32u] k);
	__gshared ulong crypto_verify_16_bytes();
	__gshared int crypto_verify_16(const(ubyte)* x, const(ubyte)* y);
	__gshared ulong crypto_verify_32_bytes();
	__gshared int crypto_verify_32(const(ubyte)* x, const(ubyte)* y);
	__gshared ulong crypto_verify_64_bytes();
	__gshared int crypto_verify_64(const(ubyte)* x, const(ubyte)* y);
	struct randombytes_implementation
	{
		const(char)* function() implementation_name = void;
		uint function() random = void;
		void function() stir = void;
		uint function(const(uint) upper_bound) uniform = void;
		void function(void* buf, const(ulong) size) buf = void;
		int function() close = void;
	}

	__gshared ulong randombytes_seedbytes();
	__gshared void randombytes_buf(void* buf, const(ulong) size);
	__gshared void randombytes_buf_deterministic(void* buf, const(ulong) size, const(ubyte)[32u] seed);
	__gshared uint randombytes_random();
	__gshared uint randombytes_uniform(const(uint) upper_bound);
	__gshared void randombytes_stir();
	__gshared int randombytes_close();
	__gshared int randombytes_set_implementation( randombytes_implementation* impl);
	__gshared const(char)* randombytes_implementation_name();
	__gshared int sodium_runtime_has_neon();
	__gshared int sodium_runtime_has_sse2();
	__gshared int sodium_runtime_has_sse3();
	__gshared int sodium_runtime_has_ssse3();
	__gshared int sodium_runtime_has_sse41();
	__gshared int sodium_runtime_has_avx();
	__gshared int sodium_runtime_has_avx2();
	__gshared int sodium_runtime_has_avx512f();
	__gshared int sodium_runtime_has_pclmul();
	__gshared int sodium_runtime_has_aesni();
	__gshared int sodium_runtime_has_rdrand();
	__gshared void sodium_memzero(void* pnt, const(ulong) len);
	__gshared void sodium_stackzero(const(ulong) len);
	__gshared int sodium_memcmp(const(void)* b1_, const(void)* b2_, ulong len);
	__gshared int sodium_compare(const(ubyte)* b1_, const(ubyte)* b2_, ulong len);
	__gshared int sodium_is_zero(const(ubyte)* n, const(ulong) nlen);
	__gshared void sodium_increment(ubyte* n, const(ulong) nlen);
	__gshared void sodium_add(ubyte* a, const(ubyte)* b, const(ulong) len);
	__gshared void sodium_sub(ubyte* a, const(ubyte)* b, const(ulong) len);
	__gshared char* sodium_bin2hex(char* hex, const(ulong) hex_maxlen, const(ubyte)* bin_, const(ulong) bin_len);
	__gshared int sodium_hex2bin(ubyte* bin_, const(ulong) bin_maxlen, const(char)* hex, const(ulong) hex_len, const(char)* ignore, ulong* bin_len, const(char)** hex_end);
	__gshared ulong sodium_base64_encoded_len(const(ulong) bin_len, const(int) variant);
	__gshared char* sodium_bin2base64(char* b64, const(ulong) b64_maxlen, const(ubyte)* bin_, const(ulong) bin_len, const(int) variant);
	__gshared int sodium_base642bin(ubyte* bin_, const(ulong) bin_maxlen, const(char)* b64, const(ulong) b64_len, const(char)* ignore, ulong* bin_len, const(char)** b64_end, const(int) variant);
	__gshared int sodium_mlock(void* addr, const(ulong) len);
	__gshared int sodium_munlock(void* addr, const(ulong) len);
	__gshared void* sodium_malloc(const(ulong) size);
	__gshared void* sodium_allocarray(ulong count, ulong size);
	__gshared void sodium_free(void* ptr);
	__gshared int sodium_mprotect_noaccess(void* ptr);
	__gshared int sodium_mprotect_readonly(void* ptr);
	__gshared int sodium_mprotect_readwrite(void* ptr);
	__gshared int sodium_pad(ulong* padded_buflen_p, ubyte* buf, ulong unpadded_buflen, ulong blocksize, ulong max_buflen);
	__gshared int sodium_unpad(ulong* unpadded_buflen_p, const(ubyte)* buf, ulong padded_buflen, ulong blocksize);
	__gshared ulong crypto_stream_xchacha20_keybytes();
	__gshared ulong crypto_stream_xchacha20_noncebytes();
	__gshared ulong crypto_stream_xchacha20_messagebytes_max();
	__gshared int crypto_stream_xchacha20(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_xchacha20_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_xchacha20_xor_ic(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, ulong ic, const(ubyte)* k);
	__gshared void crypto_stream_xchacha20_keygen(ubyte[32u] k);
	__gshared ulong crypto_box_curve25519xchacha20poly1305_seedbytes();
	__gshared ulong crypto_box_curve25519xchacha20poly1305_publickeybytes();
	__gshared ulong crypto_box_curve25519xchacha20poly1305_secretkeybytes();
	__gshared ulong crypto_box_curve25519xchacha20poly1305_beforenmbytes();
	__gshared ulong crypto_box_curve25519xchacha20poly1305_noncebytes();
	__gshared ulong crypto_box_curve25519xchacha20poly1305_macbytes();
	__gshared ulong crypto_box_curve25519xchacha20poly1305_messagebytes_max();
	__gshared int crypto_box_curve25519xchacha20poly1305_seed_keypair(ubyte* pk, ubyte* sk, const(ubyte)* seed);
	__gshared int crypto_box_curve25519xchacha20poly1305_keypair(ubyte* pk, ubyte* sk);
	__gshared int crypto_box_curve25519xchacha20poly1305_easy(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_curve25519xchacha20poly1305_open_easy(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_curve25519xchacha20poly1305_detached(ubyte* c, ubyte* mac, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_curve25519xchacha20poly1305_open_detached(ubyte* m, const(ubyte)* c, const(ubyte)* mac, ulong clen, const(ubyte)* n, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_curve25519xchacha20poly1305_beforenm(ubyte* k, const(ubyte)* pk, const(ubyte)* sk);
	__gshared int crypto_box_curve25519xchacha20poly1305_easy_afternm(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_curve25519xchacha20poly1305_open_easy_afternm(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_curve25519xchacha20poly1305_detached_afternm(ubyte* c, ubyte* mac, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_box_curve25519xchacha20poly1305_open_detached_afternm(ubyte* m, const(ubyte)* c, const(ubyte)* mac, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared ulong crypto_box_curve25519xchacha20poly1305_sealbytes();
	__gshared int crypto_box_curve25519xchacha20poly1305_seal(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* pk);
	__gshared int crypto_box_curve25519xchacha20poly1305_seal_open(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* pk, const(ubyte)* sk);
	__gshared ulong crypto_core_ed25519_bytes();
	__gshared ulong crypto_core_ed25519_uniformbytes();
	__gshared ulong crypto_core_ed25519_hashbytes();
	__gshared ulong crypto_core_ed25519_scalarbytes();
	__gshared ulong crypto_core_ed25519_nonreducedscalarbytes();
	__gshared int crypto_core_ed25519_is_valid_point(const(ubyte)* p);
	__gshared int crypto_core_ed25519_add(ubyte* r, const(ubyte)* p, const(ubyte)* q);
	__gshared int crypto_core_ed25519_sub(ubyte* r, const(ubyte)* p, const(ubyte)* q);
	__gshared int crypto_core_ed25519_from_uniform(ubyte* p, const(ubyte)* r);
	__gshared int crypto_core_ed25519_from_hash(ubyte* p, const(ubyte)* h);
	__gshared void crypto_core_ed25519_random(ubyte* p);
	__gshared void crypto_core_ed25519_scalar_random(ubyte* r);
	__gshared int crypto_core_ed25519_scalar_invert(ubyte* recip, const(ubyte)* s);
	__gshared void crypto_core_ed25519_scalar_negate(ubyte* neg, const(ubyte)* s);
	__gshared void crypto_core_ed25519_scalar_complement(ubyte* comp, const(ubyte)* s);
	__gshared void crypto_core_ed25519_scalar_add(ubyte* z, const(ubyte)* x, const(ubyte)* y);
	__gshared void crypto_core_ed25519_scalar_sub(ubyte* z, const(ubyte)* x, const(ubyte)* y);
	__gshared void crypto_core_ed25519_scalar_mul(ubyte* z, const(ubyte)* x, const(ubyte)* y);
	__gshared void crypto_core_ed25519_scalar_reduce(ubyte* r, const(ubyte)* s);
	__gshared ulong crypto_core_ristretto255_bytes();
	__gshared ulong crypto_core_ristretto255_hashbytes();
	__gshared ulong crypto_core_ristretto255_scalarbytes();
	__gshared ulong crypto_core_ristretto255_nonreducedscalarbytes();
	__gshared int crypto_core_ristretto255_is_valid_point(const(ubyte)* p);
	__gshared int crypto_core_ristretto255_add(ubyte* r, const(ubyte)* p, const(ubyte)* q);
	__gshared int crypto_core_ristretto255_sub(ubyte* r, const(ubyte)* p, const(ubyte)* q);
	__gshared int crypto_core_ristretto255_from_hash(ubyte* p, const(ubyte)* r);
	__gshared void crypto_core_ristretto255_random(ubyte* p);
	__gshared void crypto_core_ristretto255_scalar_random(ubyte* r);
	__gshared int crypto_core_ristretto255_scalar_invert(ubyte* recip, const(ubyte)* s);
	__gshared void crypto_core_ristretto255_scalar_negate(ubyte* neg, const(ubyte)* s);
	__gshared void crypto_core_ristretto255_scalar_complement(ubyte* comp, const(ubyte)* s);
	__gshared void crypto_core_ristretto255_scalar_add(ubyte* z, const(ubyte)* x, const(ubyte)* y);
	__gshared void crypto_core_ristretto255_scalar_sub(ubyte* z, const(ubyte)* x, const(ubyte)* y);
	__gshared void crypto_core_ristretto255_scalar_mul(ubyte* z, const(ubyte)* x, const(ubyte)* y);
	__gshared void crypto_core_ristretto255_scalar_reduce(ubyte* r, const(ubyte)* s);
	__gshared ulong crypto_scalarmult_ed25519_bytes();
	__gshared ulong crypto_scalarmult_ed25519_scalarbytes();
	__gshared int crypto_scalarmult_ed25519(ubyte* q, const(ubyte)* n, const(ubyte)* p);
	__gshared int crypto_scalarmult_ed25519_noclamp(ubyte* q, const(ubyte)* n, const(ubyte)* p);
	__gshared int crypto_scalarmult_ed25519_base(ubyte* q, const(ubyte)* n);
	__gshared int crypto_scalarmult_ed25519_base_noclamp(ubyte* q, const(ubyte)* n);
	__gshared ulong crypto_scalarmult_ristretto255_bytes();
	__gshared ulong crypto_scalarmult_ristretto255_scalarbytes();
	__gshared int crypto_scalarmult_ristretto255(ubyte* q, const(ubyte)* n, const(ubyte)* p);
	__gshared int crypto_scalarmult_ristretto255_base(ubyte* q, const(ubyte)* n);
	__gshared ulong crypto_secretbox_xchacha20poly1305_keybytes();
	__gshared ulong crypto_secretbox_xchacha20poly1305_noncebytes();
	__gshared ulong crypto_secretbox_xchacha20poly1305_macbytes();
	__gshared ulong crypto_secretbox_xchacha20poly1305_messagebytes_max();
	__gshared int crypto_secretbox_xchacha20poly1305_easy(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_xchacha20poly1305_open_easy(ubyte* m, const(ubyte)* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_xchacha20poly1305_detached(ubyte* c, ubyte* mac, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_secretbox_xchacha20poly1305_open_detached(ubyte* m, const(ubyte)* c, const(ubyte)* mac, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_bytes_min();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_bytes_max();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_passwd_min();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_passwd_max();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_saltbytes();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_strbytes();
	__gshared const(char)* crypto_pwhash_scryptsalsa208sha256_strprefix();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_opslimit_min();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_opslimit_max();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_memlimit_min();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_memlimit_max();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_opslimit_interactive();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_memlimit_interactive();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive();
	__gshared ulong crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive();
	__gshared int crypto_pwhash_scryptsalsa208sha256(ubyte* out_, ulong outlen, const(char)* passwd, ulong passwdlen, const(ubyte)* salt, ulong opslimit, ulong memlimit);
	__gshared int crypto_pwhash_scryptsalsa208sha256_str(char[102u] out_, const(char)* passwd, ulong passwdlen, ulong opslimit, ulong memlimit);
	__gshared int crypto_pwhash_scryptsalsa208sha256_str_verify(const(char)[102u] str, const(char)* passwd, ulong passwdlen);
	__gshared int crypto_pwhash_scryptsalsa208sha256_ll(const(ubyte)* passwd, ulong passwdlen, const(ubyte)* salt, ulong saltlen, ulong N, uint r, uint p, ubyte* buf, ulong buflen);
	__gshared int crypto_pwhash_scryptsalsa208sha256_str_needs_rehash(const(char)[102u] str, ulong opslimit, ulong memlimit);
	__gshared ulong crypto_stream_salsa2012_keybytes();
	__gshared ulong crypto_stream_salsa2012_noncebytes();
	__gshared ulong crypto_stream_salsa2012_messagebytes_max();
	__gshared int crypto_stream_salsa2012(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_salsa2012_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared void crypto_stream_salsa2012_keygen(ubyte[32u] k);
	__gshared ulong crypto_stream_salsa208_keybytes();
	__gshared ulong crypto_stream_salsa208_noncebytes();
	__gshared ulong crypto_stream_salsa208_messagebytes_max();
	__gshared int crypto_stream_salsa208(ubyte* c, ulong clen, const(ubyte)* n, const(ubyte)* k);
	__gshared int crypto_stream_salsa208_xor(ubyte* c, const(ubyte)* m, ulong mlen, const(ubyte)* n, const(ubyte)* k);
	__gshared void crypto_stream_salsa208_keygen(ubyte[32u] k);

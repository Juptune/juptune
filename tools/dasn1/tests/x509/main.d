import juptune.core.util : resultAssert;
import juptune.data.buffer : MemoryReader;

import juptune.data.asn1.decode.bcd.encoding 
    : asn1DecodeComponentHeader, asn1ReadContentBytes, Asn1ComponentHeader,
        Asn1Identifier, Asn1Ruleset;

import tests.x509.raw.PKIX1Explicit88_1_3_6_1_5_5_7_0_18, tests.x509.raw.PKIX1Implicit88_1_3_6_1_5_5_7_0_19; // Generated by refresh.sh

void main(){}

unittest
{
    // const(ubyte[]) asn1 = [
    //     0x30,  0x82,  0x02,  0x2c,  0x30,  0x82,  0x01,  0xd2,  0xa0,  0x03,  0x02,  0x01,  0x02,  0x02,  0x01,  0x00,
    //     0x30,  0x0a,  0x06,  0x08,  0x2a,  0x86,  0x48,  0xce,  0x3d,  0x04,  0x03,  0x02,  0x30,  0x7d,  0x31,  0x0b,
    //     0x30,  0x09,  0x06,  0x03,  0x55,  0x04,  0x06,  0x13,  0x02,  0x42,  0x45,  0x31,  0x0f,  0x30,  0x0d,  0x06,
    //     0x03,  0x55,  0x04,  0x0a,  0x13,  0x06,  0x47,  0x6e,  0x75,  0x54,  0x4c,  0x53,  0x31,  0x25,  0x30,  0x23,
    //     0x06,  0x03,  0x55,  0x04,  0x0b,  0x13,  0x1c,  0x47,  0x6e,  0x75,  0x54,  0x4c,  0x53,  0x20,  0x63,  0x65,
    //     0x72,  0x74,  0x69,  0x66,  0x69,  0x63,  0x61,  0x74,  0x65,  0x20,  0x61,  0x75,  0x74,  0x68,  0x6f,  0x72,
    //     0x69,  0x74,  0x79,  0x31,  0x0f,  0x30,  0x0d,  0x06,  0x03,  0x55,  0x04,  0x08,  0x13,  0x06,  0x4c,  0x65,
    //     0x75,  0x76,  0x65,  0x6e,  0x31,  0x25,  0x30,  0x23,  0x06,  0x03,  0x55,  0x04,  0x03,  0x13,  0x1c,  0x47,
    //     0x6e,  0x75,  0x54,  0x4c,  0x53,  0x20,  0x63,  0x65,  0x72,  0x74,  0x69,  0x66,  0x69,  0x63,  0x61,  0x74,
    //     0x65,  0x20,  0x61,  0x75,  0x74,  0x68,  0x6f,  0x72,  0x69,  0x74,  0x79,  0x30,  0x1e,  0x17,  0x0d,  0x31,
    //     0x31,  0x30,  0x35,  0x32,  0x33,  0x32,  0x30,  0x33,  0x38,  0x32,  0x31,  0x5a,  0x17,  0x0d,  0x31,  0x32,
    //     0x31,  0x32,  0x32,  0x32,  0x30,  0x37,  0x34,  0x31,  0x35,  0x31,  0x5a,  0x30,  0x7d,  0x31,  0x0b,  0x30,
    //     0x09,  0x06,  0x03,  0x55,  0x04,  0x06,  0x13,  0x02,  0x42,  0x45,  0x31,  0x0f,  0x30,  0x0d,  0x06,  0x03,
    //     0x55,  0x04,  0x0a,  0x13,  0x06,  0x47,  0x6e,  0x75,  0x54,  0x4c,  0x53,  0x31,  0x25,  0x30,  0x23,  0x06,
    //     0x03,  0x55,  0x04,  0x0b,  0x13,  0x1c,  0x47,  0x6e,  0x75,  0x54,  0x4c,  0x53,  0x20,  0x63,  0x65,  0x72,
    //     0x74,  0x69,  0x66,  0x69,  0x63,  0x61,  0x74,  0x65,  0x20,  0x61,  0x75,  0x74,  0x68,  0x6f,  0x72,  0x69,
    //     0x74,  0x79,  0x31,  0x0f,  0x30,  0x0d,  0x06,  0x03,  0x55,  0x04,  0x08,  0x13,  0x06,  0x4c,  0x65,  0x75,
    //     0x76,  0x65,  0x6e,  0x31,  0x25,  0x30,  0x23,  0x06,  0x03,  0x55,  0x04,  0x03,  0x13,  0x1c,  0x47,  0x6e,
    //     0x75,  0x54,  0x4c,  0x53,  0x20,  0x63,  0x65,  0x72,  0x74,  0x69,  0x66,  0x69,  0x63,  0x61,  0x74,  0x65,
    //     0x20,  0x61,  0x75,  0x74,  0x68,  0x6f,  0x72,  0x69,  0x74,  0x79,  0x30,  0x59,  0x30,  0x13,  0x06,  0x07,
    //     0x2a,  0x86,  0x48,  0xce,  0x3d,  0x02,  0x01,  0x06,  0x08,  0x2a,  0x86,  0x48,  0xce,  0x3d,  0x03,  0x01,
    //     0x07,  0x03,  0x42,  0x00,  0x04,  0x52,  0xd8,  0x8d,  0x23,  0x8a,  0xe3,  0x67,  0xd7,  0x86,  0x36,  0xb1,
    //     0x20,  0x0b,  0x09,  0x7d,  0xc8,  0xc9,  0xba,  0xa2,  0x20,  0x95,  0x2f,  0xc5,  0x4a,  0x63,  0xfa,  0x83,
    //     0x5f,  0xce,  0x78,  0x2f,  0x8f,  0xf3,  0x62,  0xca,  0xfd,  0xb7,  0xf7,  0x80,  0x56,  0x9d,  0x6e,  0x17,
    //     0xb9,  0x0e,  0x11,  0x4c,  0x48,  0xb2,  0xc0,  0xaf,  0x3b,  0x59,  0x17,  0x16,  0x30,  0x68,  0x09,  0x07,
    //     0x99,  0x17,  0xfe,  0xdd,  0xa7,  0xa3,  0x43,  0x30,  0x41,  0x30,  0x0f,  0x06,  0x03,  0x55,  0x1d,  0x13,
    //     0x01,  0x01,  0xff,  0x04,  0x05,  0x30,  0x03,  0x01,  0x01,  0xff,  0x30,  0x0f,  0x06,  0x03,  0x55,  0x1d,
    //     0x0f,  0x01,  0x01,  0xff,  0x04,  0x05,  0x03,  0x03,  0x07,  0x06,  0x00,  0x30,  0x1d,  0x06,  0x03,  0x55,
    //     0x1d,  0x0e,  0x04,  0x16,  0x04,  0x14,  0xf0,  0xb4,  0x81,  0xfe,  0x98,  0x12,  0xbf,  0xb5,  0x28,  0xb9,
    //     0x64,  0x40,  0x03,  0xcb,  0xcc,  0x1f,  0x66,  0x4e,  0x28,  0x03,  0x30,  0x0a,  0x06,  0x08,  0x2a,  0x86,
    //     0x48,  0xce,  0x3d,  0x04,  0x03,  0x02,  0x03,  0x48,  0x00,  0x30,  0x45,  0x02,  0x20,  0x31,  0xae,  0xc0,
    //     0x3d,  0x4a,  0x3f,  0x21,  0xbe,  0x85,  0x17,  0xfc,  0xf0,  0xc7,  0xb2,  0x31,  0x07,  0x2a,  0x38,  0x56,
    //     0x43,  0xd1,  0x36,  0xd5,  0x95,  0xe1,  0x7e,  0x52,  0xc0,  0x06,  0x43,  0x87,  0xa7,  0x02,  0x21,  0x00,
    //     0x97,  0x8c,  0x0e,  0xb8,  0x3c,  0x0a,  0x41,  0xaf,  0xae,  0xa5,  0xcf,  0x06,  0x7e,  0xd5,  0xc4,  0xd8,
    //     0x2f,  0xff,  0xe2,  0x62,  0x80,  0x34,  0x10,  0xba,  0x22,  0xdd,  0x35,  0x81,  0x46,  0x93,  0x22,  0x9a,
    // ];
    const(ubyte[]) asn1 = [
        /*0x30, 0x2D,*/ /*0x30, 0x2B,*/ /*0xA0, 0x29,*/ /*0xA0, 0x27,*/
        // 0x86, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F,
        // 0x2F, 0x63, 0x2E, 0x70, 0x6B, 0x69, 0x2E, 0x67,
        // 0x6F, 0x6F, 0x67, 0x2F, 0x77, 0x72, 0x32, 0x2F,
        // 0x6F, 0x42, 0x46, 0x59, 0x59, 0x61, 0x68, 0x7A,
        // 0x67, 0x56, 0x49, 0x2E, 0x63, 0x72, 0x6C

         0x30,  0x36,                             // Extension
           0x06,  0x03,  0x55,  0x1d,  0x1f,      // Extension.extnId
           0x04, 0x2f,                            // Extension.extnValue
             0x30,  0x2d,
                // ^^ CRLDistributionPoints ::= SEQUENCE (SIZE (1..MAX)) OF DistributionPoint
                // Asn1ComponentHeader(Asn1Identifier(universal, constructed, 16), 45)
                // Header for CRLDistributionPoints
                // Consumed by caller code (no validation)
                 0x30,  0x2b,
                 // ^^ DistributionPoint ::= SEQUENCE
                 // Asn1ComponentHeader(Asn1Identifier(universal, constructed, 16), 43)
                 // Header for first item in SEQUENCE OF
                 // Consumed by Asn1SequenceOf foreach
                     0xa0,  0x29,
                     // ^^ SEQUENCE (SIZE (1..MAX)) OF GeneralName
                     // Asn1ComponentHeader(Asn1Identfier(contextSpecific, constructed, 0), 41)
                     // Header for field distributionPoint of DistributionPoint
                     //     Resolves to: fullName [0] GeneralNames < DistributionPointName
                     // Consumed by DistributionPoint
                        0xa0,  0x27,
                        // ^^ AnotherName ::= SEQUENCE {}
                        // Asn1ComponentHeader(Asn1Identifier(contextSpecific, constructed, 0), 39)
                        // Resolves to: otherName [0]  AnotherName < GeneralName
                        // Consumed by Asn1SequenceOf foreach
                            0x86,  0x25,          // GeneralName.uniformResourceIdentifier (IA5String) Asn1ComponentHeader(Asn1Identifier(contextSpecific, primitive, 6), 37)
                                0x68,  0x74,  0x74,  0x70,  0x3a,  0x2f,  0x2f,  0x63,  // 8
                                0x2e,  0x70,  0x6b,  0x69,  0x2e,  0x67,  0x6f,  0x6f,  // 16
                                0x67,  0x2f,  0x77,  0x72,  0x32,  0x2f,  0x6f,  0x42,  // 24
                                0x46,  0x59,  0x59,  0x61,  0x68,  0x7a,  0x67,  0x56,  // 32
                                0x49,  0x2e,  0x63,  0x72,  0x6c,                       // 37
    ];
    auto memory = MemoryReader(asn1);
    
    Asn1ComponentHeader header;
    MemoryReader content;
    asn1DecodeComponentHeader!(Asn1Ruleset.der)(memory, header).resultAssert;
    asn1ReadContentBytes(memory, header.length, content).resultAssert;

    import std.stdio;

    Extension ext;
    ext.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;

    memory = MemoryReader(ext.getExtnValue().data);
    asn1DecodeComponentHeader!(Asn1Ruleset.der)(memory, header).resultAssert;

    CRLDistributionPoints crldp;
    crldp.fromDecoding!(Asn1Ruleset.der)(memory, header.identifier).resultAssert;

    // DistributionPoint dp;
    // dp.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;

    // GeneralNames dp;
    // dp.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;

    // GeneralName dp;
    // dp.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;

    // AnotherName dp;
    // dp.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;
}
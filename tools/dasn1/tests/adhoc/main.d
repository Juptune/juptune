import juptune.core.util : resultAssert;
import juptune.data.buffer : MemoryReader;

import juptune.data.asn1.decode.bcd.encoding 
    : asn1DecodeComponentHeader, asn1ReadContentBytes, Asn1ComponentHeader,
        Asn1Identifier, Asn1Ruleset;

import tests.adhoc.raw.TestModule_0 : MyBool, MyChoice; // Generated by refresh.sh

void main(){}

unittest
{
    const(ubyte[]) asn1 = [
        0x01, // Primitive, [UNIVERSAL 1]
            0x01, // Short form, length of 1
                0xFF, // TRUE

        0xA0, // Constructed, [0]
            0x05, // Short form, length of 5
                0x6A, // Constructed, [APPLICATION 10]
                    0x03, // Short form, length of 3
                        0x03, // Primitive, [UNIVERSAL 3]
                            0x01, // Short form, length of 1
                                0x00 // Empty bit string
    ];
    auto memory = MemoryReader(asn1);
    
    Asn1ComponentHeader header;
    asn1DecodeComponentHeader!(Asn1Ruleset.der)(memory, header).resultAssert;
    assert(header.identifier.tag == 1);
    assert(header.identifier.encoding == Asn1Identifier.Encoding.primitive);
    assert(header.identifier.class_ == Asn1Identifier.Class.universal);

    MemoryReader content;
    asn1ReadContentBytes(memory, header.length, content).resultAssert;

    MyBool myBool;
    myBool.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;
    assert(myBool.get().value == 0xFF);
    assert(myBool.get().asBool);

    MyChoice myChoice;
    content = MemoryReader(asn1[2..3]);
    myChoice.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;
    assert(myChoice.isBoolean);
    assert(myChoice.getBoolean().asBool);

    asn1DecodeComponentHeader!(Asn1Ruleset.der)(memory, header).resultAssert;
    asn1ReadContentBytes(memory, header.length, content).resultAssert;
    myChoice.fromDecoding!(Asn1Ruleset.der)(content, header.identifier).resultAssert;
    assert(myChoice.isBitstring);
    assert(myChoice.getBitstring().bitCount == 0);
}